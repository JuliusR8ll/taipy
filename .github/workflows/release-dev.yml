name: Create Github Dev Release

on:
  workflow_dispatch:
    inputs:
      taipy-gui-version:
        description: "The taipy-gui version to use (ex: 2.3.0.dev0)"
        required: true
      taipy-rest-version:
        description: "The taipy-rest version to use (ex: 2.3.0.dev0)"
      taipy-templates-version:
        description: "The taipy-templates version to use (ex: 2.3.0.dev0)"

jobs:
  release-dev-package-v2:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.DEPLOY_KEY}}
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Dev Version
        id: version-setup
        run: |
          python tools/release/setup_version.py taipy dev >> $GITHUB_OUTPUT

      - name: Check Taipy Gui version is available
        run: |
          curl https://pypi.org/simple/taipy-gui/ | grep -o ">taipy-gui-${{ github.event.inputs.taipy-gui-version }}\.tar\.gz<"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Install Taipy Gui
        run: |
          pip install "taipy-gui==${{ github.event.inputs.taipy-gui-version }}"

      - name: Check Taipy Rest and Taipy Templates are available
        if: github.event.inputs.taipy-rest-version != '' && github.event.inputs.taipy-templates-version != ''
        run: |
          curl https://pypi.org/simple/taipy-rest/ | grep -o ">taipy-rest-${{ github.event.inputs.taipy-rest-version }}\.tar\.gz<"
          curl https://pypi.org/simple/taipy-templates/ | grep -o ">taipy-templates-${{ github.event.inputs.taipy-templates-version }}\.tar\.gz<"

      - name: Update setup.py locally
        if: github.event.inputs.taipy-gui-version != '' && github.event.inputs.taipy-rest-version != '' && github.event.inputs.taipy-templates-version != ''
        run: |
          mv setup.py setup.taipy.py
          python tools/release/update_setup.py "${{ github.event.inputs.taipy-gui-version }}" "${{ github.event.inputs.taipy-rest-version }}" "${{ github.event.inputs.taipy-templates-version }}"

      - name: Build Taipy package
        run: python setup.py build_py && python -m build

      - name: Install the Taipy package and test it
        run: |
          # Install package
          echo "Installing package..."
          pip install ./dist/${{ github.event.repository.name }}-${{ steps.version-setup.outputs.VERSION }}.tar.gz

      - name: Check Taipy Installation
        run: |
          python tools/validate_taipy_install.py

      - name: Extract commit hash
        shell: bash
        run: echo "HASH=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        id: extract_hash

      - name: Create/update release and tag
        run: |
          echo "Creating release ${{ steps.current-version.outputs.VERSION }}"
          gh release create ${{ steps.version-setup.outputs.VERSION }} ./dist/${{ github.event.repository.name }}-${{ steps.version-setup.outputs.VERSION }}.tar.gz --target ${{ steps.extract_hash.outputs.HASH }} --prerelease --title ${{ steps.version-setup.outputs.VERSION }} --notes "Release Draft ${{ steps.version-setup.outputs.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Reset changes
        run: |
          git reset --hard HEAD
          git clean -fdx

      - uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: Update version to ${{ steps.version-setup.outputs.NEW_VERSION }}
